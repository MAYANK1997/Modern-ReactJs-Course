Showing PokeCards and Building a simple Pokemon Game displaying winning and loosing card deck based on their experience.

Task Displaying PokeCards

Components Pokecard and Pokedex 

A single pokecard component for creating a template pokecard and pokedex component for creating a deck of pokecards

Steps

npx create-react-app pokemon

cd pokemon

PokeCard Component:

class Pokecard extends Component{
render(){
return(

<div>     
<h1> {this.props.name} </h1>
<img src=""/>

</div>

)

}


}


export defaults Pokecard



Pokedex Component

import React, { Component } from 'react';
import PokeCard from '../PokeCard/PokeCard';
import './Pokedex.css';

class Pokedex extends Component {
    static defaultProps = {
		pokemon : [
			{ id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },
			{ id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },
			{ id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },
			{ id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },
			{ id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },
			{ id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },
			{ id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },
			{ id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }
		]
	};
	render() {
		let title;
		if (this.props.isWinner) {
			title = <h1 className="Pokedex-winner">Winning Hand</h1>;
		} else {
			title = <h1 className="Pokedex-loser">Losing Hand</h1>;
		}
		return (
			<div className="Pokedex">
				{title}
				<h4>Total Experience: {this.props.exp}</h4>
				<div className="Pokedex-cards">
					{this.props.pokemon.map((p) => (
						<PokeCard id={p.id} name={p.name} type={p.type} exp={p.base_experience} />
					))}
				</div>
			</div>
		);
	}
}

export default Pokedex;


Pokegame Component

import React, { Component } from 'react';

import Pokedex from '../Pokedex/Pokedex';


class Pokegame extends Component {
	static defaultProps = {
		pokemon : [
			{ id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },
			{ id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },
			{ id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },
			{ id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },
			{ id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },
			{ id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },
			{ id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },
			{ id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }
		]
	};
	render() {
		let hand1 = [];
		let hand2 = [ ...this.props.pokemon ];
		while (hand1.length < hand2.length) {
			let randIdx = Math.floor(Math.random() * hand2.length);
			let randPokemon = hand2.splice(randIdx, 1)[0];
			hand1.push(randPokemon);
		}
		let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);
		let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience, 0);
		return (
			<div>
				<Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />
				<Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />
                
			</div>
		);
	}
}
export default Pokegame;


