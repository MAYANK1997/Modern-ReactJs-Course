JSX - Javascript Syntax Extendend

const element = <h1>Hello, world!</h1>;
It is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.

React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.

Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.

We recommend using the “Babel” language definition for your editor of choice so that both ES6 and JSX code is properly highlighted.

JSX Prevents Injection Attacks 
By default, React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.

Example of JSX :
function getMoods(){
const moods = [Angry, Sad, Happy, Silly, Quiet, Paranoid];
return moods[Math.floor(Math.random() * moods.length)];
}
class Hello extends React.Component{
render(){
return (
<div>

<h1> Your number is: {2*0.6} </h1>
<h1> Your mood: {getmoods()}</h1>
</div>

);

}


}

ReactDOM.render(<Hello />, document.getElementById('root'));

Conditionals in JSX 

function getNum(){

return Math.floor(Math.random()*10)+1);

}

class NumPicker extends React.Component{
render(){
const num = getNum();

return (
<div>
<h1> Your number is: {num} </h1>
<p> {num===7 ? 'Congratulations':'Loser'} </p>
<p> {num===7 ? <img src="" />:null} </p>
</div>

);

}


}

ReactDOM.render(<NumPicker />, document.getElementById('root'));


